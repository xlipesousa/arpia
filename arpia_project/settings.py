"""
Django settings for arpia_project project.

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from urllib.parse import urlparse

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "arpia-dev-placeholder-secret")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() in ("1", "true", "yes")
TESTING = any(arg == "test" for arg in sys.argv)

ALLOWED_HOSTS = [h.strip() for h in os.getenv("ALLOWED_HOSTS", "127.0.0.1,localhost").split(",") if h.strip()]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # third-party
    "rest_framework",
    "rest_framework.authtoken",  # habilita TokenAuth
    # ARPIA apps
    "arpia_core",
    "arpia_scan",
    "arpia_vuln",
    "arpia_hunt",
    "arpia_report",
    "arpia_log",
    "arpia_pentest",
    "arpia_ai",
    "api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "arpia_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "arpia_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Simple DATABASE_URL parser (fallback to sqlite)
_DATABASE_URL = os.getenv("DATABASE_URL", "").strip()
if _DATABASE_URL.startswith("sqlite") or _DATABASE_URL == "":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": str(BASE_DIR / "db.sqlite3"),
        }
    }
else:
    parsed = urlparse(_DATABASE_URL)
    DB_ENGINE = "django.db.backends.postgresql" if parsed.scheme.startswith("postgres") or parsed.scheme.startswith("psql") else "django.db.backends.postgresql"
    DATABASES = {
        "default": {
            "ENGINE": DB_ENGINE,
            "NAME": parsed.path.lstrip("/"),
            "USER": parsed.username or os.getenv("POSTGRES_USER", ""),
            "PASSWORD": parsed.password or os.getenv("POSTGRES_PASSWORD", ""),
            "HOST": parsed.hostname or os.getenv("POSTGRES_HOST", "localhost"),
            "PORT": str(parsed.port or os.getenv("POSTGRES_PORT", "5432")),
        }
    }


if DATABASES["default"]["ENGINE"] == "django.db.backends.sqlite3":
    sqlite_options = DATABASES["default"].setdefault("OPTIONS", {})
    sqlite_options.setdefault("timeout", int(os.getenv("SQLITE_BUSY_TIMEOUT", "20")))

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "pt-br"

TIME_ZONE = "America/Sao_Paulo"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"

# Diretório onde 'collectstatic' copia os arquivos estáticos (obrigatório para collectstatic)
# usa BASE_DIR definido no topo do settings.py (Pathlib Path ou str)
STATIC_ROOT = BASE_DIR / "staticfiles"  # ex: /home/kali/arpia/staticfiles

# Onde estão os assets da aplicação durante o desenvolvimento
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# (Opcional) storage para produção; pode manter o padrão durante desenvolvimento
# STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ),
}

# templates dir já deve existir. garantir:
TEMPLATES[0]["DIRS"] = [BASE_DIR / "templates"]

# URL do login (usada por @login_required e redirecionamentos)
LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/"

# redirecionar logout para a tela de login do ARPIA
LOGOUT_REDIRECT_URL = "/login/"


# Token opcional para ingestão de logs via API (Header: Authorization: Token <valor>)
ARPIA_LOG_INGEST_TOKEN = os.getenv("ARPIA_LOG_INGEST_TOKEN", "") or None


# Configurações padrão do wrapper Greenbone/GVM
ARPIA_GVM_HOST = os.getenv("ARPIA_GVM_HOST", "127.0.0.1")
ARPIA_GVM_PORT = int(os.getenv("ARPIA_GVM_PORT", "9390"))
ARPIA_GVM_SOCKET_PATH = os.getenv("ARPIA_GVM_SOCKET_PATH", "") or None
ARPIA_GVM_USERNAME = os.getenv("ARPIA_GVM_USERNAME")
ARPIA_GVM_PASSWORD = os.getenv("ARPIA_GVM_PASSWORD")
ARPIA_GVM_SCANNER_ID = os.getenv("ARPIA_GVM_SCANNER_ID", "08b69003-5fc2-4037-a479-93b440211c73")
ARPIA_GVM_SCAN_CONFIG_ID = os.getenv("ARPIA_GVM_SCAN_CONFIG_ID", "daba56c8-73ec-11df-a475-002264764cea")
ARPIA_GVM_REPORT_FORMAT_ID = os.getenv("ARPIA_GVM_REPORT_FORMAT_ID", "a994b278-1f62-11e1-96ac-406186ea4fc5")
ARPIA_GVM_REPORT_DIR = os.getenv("ARPIA_GVM_REPORT_DIR", "") or None
ARPIA_GVM_TOOL_SLUG = os.getenv("ARPIA_GVM_TOOL_SLUG", "gvm")
ARPIA_GVM_TOOL_PATH = os.getenv("ARPIA_GVM_TOOL_PATH", "") or None
ARPIA_GVM_POLL_INTERVAL = float(os.getenv("ARPIA_GVM_POLL_INTERVAL", "5"))
ARPIA_GVM_MAX_ATTEMPTS = int(os.getenv("ARPIA_GVM_MAX_ATTEMPTS", "60"))
ARPIA_GVM_TASK_TIMEOUT = os.getenv("ARPIA_GVM_TASK_TIMEOUT")
